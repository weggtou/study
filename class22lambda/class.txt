1.stl函数
类似于排序之类的函数
(1)sort(start,end,规则)从小到大排列
左闭右开
start和end是指针
规则可以是lambda，和python类似
(2)find_if(start,end,规则)
返回第一个满足规则的参数的索引

2.lambda定义
[传递作用域外的值](参数)->返回类型(可以不写){
    正常写函数
}
[]内的变量是要用到的默认值，想改变的化可以加&，
不写&的脚值捕获，写的叫引用捕获
如果想直接值捕获全部，只要写[=]就行
如果想直接引用捕获全部，只要写[&]就行
多个值用，分隔

初始化捕获
和if的初始化类似
可以在[]内新定义作用域只有该函数的值
[i=0]
但是该值是固定的，不能在函数中修改

mutable
加在括号后可以使值捕获变量和初始化捕获变量只在函数范围内改变
int x=5
[x,init=x*x](),mutable{
    x=init = 0;
    x;//0
}
x//5

3.和python一样，匿名函数可以赋值给变量然后直接使用
但是类型必须是auto
auto a=[](int &a,int &b){
    int trmp =a;
    a=backb=temp;
};
别忘了最后要加分号，是赋值过程的分号

4.递归
在用匿名函数直接写递归时会报错，需要将函数名作为一个参数传传递才可以在函数中使用
错误做法：
auto fib = [&](int x){
    if (x<=2)return 1;
    return fib(x-1)+fib(x-2);
};
cout << fib(10) << endl;

正确做法：
auto fib = [&](auto & f,int x){
    if (x<=2)return 1;
    return f(f,x-1)+f(f,x-2);
};
cout << fib(fib,10) << endl;
在开始时将函数名作为参数传递给形参
