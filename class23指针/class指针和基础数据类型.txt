1.8bit一字节，每个字节对应一个数字用来记忆位置

2.char 1字节 
short两字节
int四字节
double八字节

3.获取地址
&x
64位无符号整数

4.从同一个地址开始，以多大的字节读取数据就是类型决定的
同一段内存，通过不同类型的解读可以得到不同的结果

5.指针类型变量，占八字节，不同指针类型的变量代表不同的方式理解地址
操作：
int i =1;
void* ptr =&i;
将变量i的地址赋值给类型为空的指针
但是由于不知道是什么类型所以不能正常输出
所以最好赋值给对应类型的指针类型
int* ptr=&i
当然不同类型的指针可以强行互相转化
double d=1
int*ptr = (int*)&d;
(这里d的取地址虽然为地址但是自带属性，为double的指针，所以需要转换)
可以将double的指针强行转化为int类型，但是识别的数就会错误

6.通过指针获取对应的数据
*ptr
当然void*类型的指针不能用，因为没有类型

7.指针和&类似，当能用&时最好用&

8.指针类型因为也会作为一种变量存储在内存中，所以指针也有自己的指针，而类型是
指针指针
例如
int i =1;
int*p = &i;
int** pp = &p;
可以无限套娃

9.当指针未初始化时值是随机的
所以当指针新建时需要为空，
应该int* p = nullptr
用nullptr来新建空指针