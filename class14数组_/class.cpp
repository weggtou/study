/*数组
相同类型数据的集合
长度固定
*/
/*
定义
类型  数组名 [长度（非必须）（可以为变量）] = {n个初始数据，可以小于长度，也可以不写}
*/
/*
访问    数组 [索引]
和python类似用下标访问，但是不能是负值，
定义数组的本质是在内存中申请连续的内存空间存储数据，如果-1则是内存之前的内存，并非和python一样是倒着的第一个

*/

/*
输出
1.用传统循环输出
2.新的语法
    for (类型 变量名 ： 数组){
        cout << 变量名；
    }
    等于
    for (i = 0 ,i<数组长度 , i++){
        类型 变量名 = 数组[i];
        cout << 变量名;
    }
    一般类型为auto这样就会自动识别了
*/

/*
输入
在命名变量从数组中取值时变量名前加上&会让变量和数组的内存绑定，该变量改变则数组改变
    for (类型 &变量名 ： 数组){
        cin >> 变量名；
    }
    等于
    for (i = 0 ,i<数组长度 , i++){
        类型 &变量名 = 数组[i];
        cin >> 变量名;
    }
*/

/*
初始化
1.int a [10];  随机创建数组并不确定
  int a [10] = {} 初始化为0
  int a [10] = {1,2,3} 定义前几个数，其他的为0
  int a [] = {1,2,3} 长度由后面初始化的值决定
2.用函数
#include <algorithm>
fill (起点，终点，值)；
其中起点，终点左开右闭，用数组名+数字表示
例如；
a  为数组第一个位置
a+3 为数组第四个位置

#include <string.h>
memset (起点，值，长度)
其中起点和上一个相同，值只能为0或-1，长度是单个类型长度乘以位置数量
如该数组为int类型数组
要初始化第四个位置开始到第六个的数字
memset (a+3 , 0 , sizeof(int)*3)
*/

/*
多维数组(矩阵)
定义：
int a[10][9](可以多维)     =    {
     (行数)(列数)       {1，2，3}(第一行的默认值)
                       {1}      (第二行的默认值)        
                        (在创建时初始化，没有写的都为0)
访问：
a [1][2](一样先行后列)
可以用memset初始化
memset(a,0,sizeof(int))
*/