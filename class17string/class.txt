string 
及c加加中的字符串
char为c语言中的字符串
string的功能包含char但用起来比char方便

#include <string>

初始化
string a ="123"
string a = b
string a(3,"a") ----> "aaa"
string a("123")
string a(b)
string a(b,1,3)
从b的第一个字符开始保存3个字符
string a("123",2)
用"123"的两个字符初始化
string a({ascii,'a','b'})
string a(b.begin(),b.end())

输入输出
cin >>a 
cin也根据空格分隔
getline(cin,a)
类似cin.getline
cout << a
for(char &i:a){
    cin >> i;
}

操作
1.
+ = += <=> []
a[]
a<=>b
a = b
a = b+c
a +="123"

2.
a.at(1)
a.frount()返回第一个字符
a.back()返回最后一个字符
a.c_str返回c语言类型的字符串
a.begin()初始迭代器
a.end()
a.empty()判断是否为空
a.size()字符个数
a.clear()
a.resize()
a.push_back()
a.pop_back()
a.insert(1,"abc")
注意和vector不同的是，位置不光能用迭代器表示，还可以使用索引表示

a.erase()
和vector不同的是可以用索引，且第二个值是个数不是末尾值
当只有一个值时是将该值之后的所有值删除

a.apend()
python

a.replace(1,2,"abc")
输入的是起始值，个数

int f = a.find("abc"，0)
查找是否包含另一个字符串，返回出现的第一个位置的索引
第二个值是从哪个下标开始
找不到会返回
string::npos ,是无符号longlong的最大值
转化为int是-1
所以可以直接用if(f==-1)或(f==string::npos)来判断是否找到

a.substr(1,3)
开始值和长度，返回原字符串的子串
不填长度则返回到末尾

bool f = a.starts_with("123")
bool f = a.ends_with("123")
判断是否以字符串开头或结尾

stoi(a) stoll(a) stod()
将str转化为int,longlong,double

to_string(i)
将数字转化为字符串，无论是整形还是浮点

string a = format("{:.0f}",d)
格式化类似python